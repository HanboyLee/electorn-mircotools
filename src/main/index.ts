import { app, BrowserWindow, ipcMain } from 'electron';
import { FileService } from '../services/fileService';
import { MetadataService } from '../services/metadataService';
import * as path from 'path';

// 在開發環境中啟用熱重載
if (process.env.NODE_ENV === 'development') {
  // 使用 require 而不是 import 來避免 TS 錯誤
  const electronReloader = require('electron-reloader');
  try {
    console.log('Development mode detected, enabling hot reload...');
    electronReloader(module, {
      debug: true,
      watchRenderer: false, // 由 Vite 处理渲染进程的热重载
      ignore: ['node_modules/**/*', 'release/**/*', 'dist/**/*', '.vite/**/*', '.git/**/*'],
      // 指定要监听的文件
      paths: [
        path.join(__dirname, '**', '*.ts'),
        path.join(__dirname, '**', '*.js'),
        path.join(__dirname, '..', 'src', '**', '*.ts'),
        path.join(__dirname, '..', 'src', '**', '*.js'),
      ],
    });
    console.log('Hot reload enabled successfully');
  } catch (err) {
    console.error('Failed to setup hot reload:', err);
  }
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_ENTRY: string;
declare const MAIN_WINDOW_VITE_PRELOAD: string;

// 處理來自渲染進程的消息
ipcMain.handle('send-message', async (event, message) => {
  console.log('Received message from renderer:', message);
  return `Server received: ${message}`;
});

// 處理系統信息請求
ipcMain.handle('get-system-info', async () => {
  console.log('Getting systeminfo...');
  return {
    platform: process.platform,
    version: app.getVersion(),
    electronVersion: process.versions.electron,
  };
});

// 初始化所有服務
const initializeServices = () => {
  console.log('Initializing services...');
  const services = [
    new FileService(),
    new MetadataService(),
    // 添加更多服務...
  ];

  // 註冊所有服務的處理器
  services.forEach(service => {
    console.log('Registering handlers for service:', service.constructor.name);
    service.registerHandlers();
  });
  console.log('Services initialized successfully');
};

const createWindow = async (): Promise<void> => {
  console.log(MAIN_WINDOW_VITE_PRELOAD, 'MAIN_WINDOW_VITE_PRELOAD');
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_VITE_PRELOAD,
      nodeIntegration: true,
      contextIsolation: true,
    },
  });

  // and load the index.html of the app.
  if (process.env.NODE_ENV === 'development') {
    // 开发环境下使用 Vite dev server
    await mainWindow.loadURL('http://localhost:3000');
    mainWindow.webContents.openDevTools();
  } else {
    // 生产环境下加载打包后的文件
    await mainWindow.loadFile(MAIN_WINDOW_VITE_ENTRY);
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  console.log('App is ready, initializing...');
  createWindow();
  initializeServices();
  console.log('App initialization completed');
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
